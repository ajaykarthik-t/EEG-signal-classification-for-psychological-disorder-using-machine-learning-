{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58465050-2a5f-4b6e-a048-73c8540f8ad2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6c5e03c1-0bbe-4494-aad7-91d41fb2686a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"D:/dya/Free/brain_wave/EEG_data.csv\")\n",
    "data = pd.read_csv(\"D:/dya/Free/brain_wave/demographic_info.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "93d91550-30b6-473f-b3cb-c4e96959ed7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SubjectID</th>\n",
       "      <th>VideoID</th>\n",
       "      <th>Attention</th>\n",
       "      <th>Mediation</th>\n",
       "      <th>Raw</th>\n",
       "      <th>Delta</th>\n",
       "      <th>Theta</th>\n",
       "      <th>Alpha1</th>\n",
       "      <th>Alpha2</th>\n",
       "      <th>Beta1</th>\n",
       "      <th>Beta2</th>\n",
       "      <th>Gamma1</th>\n",
       "      <th>Gamma2</th>\n",
       "      <th>predefinedlabel</th>\n",
       "      <th>user-definedlabeln</th>\n",
       "      <th>age</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0.355294</td>\n",
       "      <td>-0.476510</td>\n",
       "      <td>-0.317217</td>\n",
       "      <td>-0.105613</td>\n",
       "      <td>-0.157642</td>\n",
       "      <td>0.094523</td>\n",
       "      <td>0.087938</td>\n",
       "      <td>0.045544</td>\n",
       "      <td>-0.169923</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>Han Chinese</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>-0.193295</td>\n",
       "      <td>-0.834378</td>\n",
       "      <td>-0.573352</td>\n",
       "      <td>-0.551518</td>\n",
       "      <td>-0.530654</td>\n",
       "      <td>-0.562100</td>\n",
       "      <td>-0.435821</td>\n",
       "      <td>-0.304417</td>\n",
       "      <td>-0.324028</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>Han Chinese</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.059256</td>\n",
       "      <td>0.239285</td>\n",
       "      <td>0.883532</td>\n",
       "      <td>2.217577</td>\n",
       "      <td>0.496016</td>\n",
       "      <td>0.312017</td>\n",
       "      <td>1.168583</td>\n",
       "      <td>0.346396</td>\n",
       "      <td>0.303549</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>Han Chinese</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>-0.118031</td>\n",
       "      <td>2.205862</td>\n",
       "      <td>-0.158536</td>\n",
       "      <td>0.274088</td>\n",
       "      <td>-0.276091</td>\n",
       "      <td>-0.334314</td>\n",
       "      <td>0.307573</td>\n",
       "      <td>0.255157</td>\n",
       "      <td>0.541603</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>Han Chinese</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>-0.123049</td>\n",
       "      <td>0.626350</td>\n",
       "      <td>0.763033</td>\n",
       "      <td>-0.059126</td>\n",
       "      <td>0.955168</td>\n",
       "      <td>0.546890</td>\n",
       "      <td>0.777338</td>\n",
       "      <td>0.190389</td>\n",
       "      <td>0.425518</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>Han Chinese</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SubjectID  VideoID  Attention  Mediation       Raw     Delta     Theta  \\\n",
       "0        0.0      0.0       56.0       43.0  0.355294 -0.476510 -0.317217   \n",
       "1        0.0      0.0       40.0       35.0 -0.193295 -0.834378 -0.573352   \n",
       "2        0.0      0.0       47.0       48.0  0.059256  0.239285  0.883532   \n",
       "3        0.0      0.0       47.0       57.0 -0.118031  2.205862 -0.158536   \n",
       "4        0.0      0.0       44.0       53.0 -0.123049  0.626350  0.763033   \n",
       "\n",
       "     Alpha1    Alpha2     Beta1     Beta2    Gamma1    Gamma2  \\\n",
       "0 -0.105613 -0.157642  0.094523  0.087938  0.045544 -0.169923   \n",
       "1 -0.551518 -0.530654 -0.562100 -0.435821 -0.304417 -0.324028   \n",
       "2  2.217577  0.496016  0.312017  1.168583  0.346396  0.303549   \n",
       "3  0.274088 -0.276091 -0.334314  0.307573  0.255157  0.541603   \n",
       "4 -0.059126  0.955168  0.546890  0.777338  0.190389  0.425518   \n",
       "\n",
       "   predefinedlabel  user-definedlabeln  age    ethnicity gender  \n",
       "0              0.0                 0.0   25  Han Chinese      M  \n",
       "1              0.0                 0.0   25  Han Chinese      M  \n",
       "2              0.0                 0.0   25  Han Chinese      M  \n",
       "3              0.0                 0.0   25  Han Chinese      M  \n",
       "4              0.0                 0.0   25  Han Chinese      M  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.rename(columns = {'subject ID': 'SubjectID',' gender':'gender',' age':'age',' ethnicity':'ethnicity'})\n",
    "df = df.merge(data,how = 'inner',on = 'SubjectID')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bf978063-cee6-44f6-a787-52ce3b93a2c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SubjectID</th>\n",
       "      <th>VideoID</th>\n",
       "      <th>Attention</th>\n",
       "      <th>Mediation</th>\n",
       "      <th>Raw</th>\n",
       "      <th>Delta</th>\n",
       "      <th>Theta</th>\n",
       "      <th>Alpha1</th>\n",
       "      <th>Alpha2</th>\n",
       "      <th>Beta1</th>\n",
       "      <th>Beta2</th>\n",
       "      <th>Gamma1</th>\n",
       "      <th>Gamma2</th>\n",
       "      <th>predefinedlabel</th>\n",
       "      <th>user-definedlabeln</th>\n",
       "      <th>age</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0.355294</td>\n",
       "      <td>-0.476510</td>\n",
       "      <td>-0.317217</td>\n",
       "      <td>-0.105613</td>\n",
       "      <td>-0.157642</td>\n",
       "      <td>0.094523</td>\n",
       "      <td>0.087938</td>\n",
       "      <td>0.045544</td>\n",
       "      <td>-0.169923</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>-0.193295</td>\n",
       "      <td>-0.834378</td>\n",
       "      <td>-0.573352</td>\n",
       "      <td>-0.551518</td>\n",
       "      <td>-0.530654</td>\n",
       "      <td>-0.562100</td>\n",
       "      <td>-0.435821</td>\n",
       "      <td>-0.304417</td>\n",
       "      <td>-0.324028</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.059256</td>\n",
       "      <td>0.239285</td>\n",
       "      <td>0.883532</td>\n",
       "      <td>2.217577</td>\n",
       "      <td>0.496016</td>\n",
       "      <td>0.312017</td>\n",
       "      <td>1.168583</td>\n",
       "      <td>0.346396</td>\n",
       "      <td>0.303549</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>-0.118031</td>\n",
       "      <td>2.205862</td>\n",
       "      <td>-0.158536</td>\n",
       "      <td>0.274088</td>\n",
       "      <td>-0.276091</td>\n",
       "      <td>-0.334314</td>\n",
       "      <td>0.307573</td>\n",
       "      <td>0.255157</td>\n",
       "      <td>0.541603</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>-0.123049</td>\n",
       "      <td>0.626350</td>\n",
       "      <td>0.763033</td>\n",
       "      <td>-0.059126</td>\n",
       "      <td>0.955168</td>\n",
       "      <td>0.546890</td>\n",
       "      <td>0.777338</td>\n",
       "      <td>0.190389</td>\n",
       "      <td>0.425518</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SubjectID  VideoID  Attention  Mediation       Raw     Delta     Theta  \\\n",
       "0        0.0      0.0       56.0       43.0  0.355294 -0.476510 -0.317217   \n",
       "1        0.0      0.0       40.0       35.0 -0.193295 -0.834378 -0.573352   \n",
       "2        0.0      0.0       47.0       48.0  0.059256  0.239285  0.883532   \n",
       "3        0.0      0.0       47.0       57.0 -0.118031  2.205862 -0.158536   \n",
       "4        0.0      0.0       44.0       53.0 -0.123049  0.626350  0.763033   \n",
       "\n",
       "     Alpha1    Alpha2     Beta1     Beta2    Gamma1    Gamma2  \\\n",
       "0 -0.105613 -0.157642  0.094523  0.087938  0.045544 -0.169923   \n",
       "1 -0.551518 -0.530654 -0.562100 -0.435821 -0.304417 -0.324028   \n",
       "2  2.217577  0.496016  0.312017  1.168583  0.346396  0.303549   \n",
       "3  0.274088 -0.276091 -0.334314  0.307573  0.255157  0.541603   \n",
       "4 -0.059126  0.955168  0.546890  0.777338  0.190389  0.425518   \n",
       "\n",
       "   predefinedlabel  user-definedlabeln  age  ethnicity  gender  \n",
       "0              0.0                 0.0   25          2       1  \n",
       "1              0.0                 0.0   25          2       1  \n",
       "2              0.0                 0.0   25          2       1  \n",
       "3              0.0                 0.0   25          2       1  \n",
       "4              0.0                 0.0   25          2       1  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['gender']=df['gender'].replace({'M':1,'F':0})\n",
    "df['ethnicity']=df['ethnicity'].replace({'Han Chinese':0,'Bengali':1,'English':2})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c7e05514-2056-4d77-aa39-7d988007bba1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VideoID\n",
       "1.0    1414\n",
       "0.0    1412\n",
       "4.0    1356\n",
       "9.0    1281\n",
       "8.0    1280\n",
       "2.0    1274\n",
       "5.0    1230\n",
       "3.0    1206\n",
       "6.0    1181\n",
       "7.0    1177\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['VideoID'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e8d25cff-a026-4bb9-ac6e-cd648dc1a751",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "predefinedlabel\n",
       "0.0    6662\n",
       "1.0    6149\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for Imbalanced-dataset\n",
    "df['predefinedlabel'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "91a320c6-c0c3-48e7-888b-2364cc7ab15f",
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in df.columns:\n",
    "    if(df[col].isnull().sum()>0):\n",
    "        print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5ca92e78-a241-47e6-b717-d237e67c6455",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\A\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x199e8844f10>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1142.86x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style('darkgrid')\n",
    "sns.displot(data=df,x='Mediation',kde=True,aspect=16/7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3e414a00-ab51-4d63-92f6-23516b2bc3b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import mutual_info_classif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "61c91888-c1d6-4403-a91b-aa5f8541a0eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VideoID            6.105055\n",
       "Alpha2             2.607683\n",
       "Gamma1             2.446724\n",
       "Delta              2.417362\n",
       "Beta1              2.157459\n",
       "Theta              2.096610\n",
       "Alpha1             2.040219\n",
       "Gamma2             1.625698\n",
       "Raw                1.501583\n",
       "Mediation          1.497490\n",
       "Beta2              1.334976\n",
       "Attention          1.264657\n",
       "SubjectID          1.139741\n",
       "gender             0.670313\n",
       "ethnicity          0.552111\n",
       "predefinedlabel    0.246693\n",
       "age                0.037095\n",
       "dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=pd.get_dummies(df['user-definedlabeln'])\n",
    "mi_score=mutual_info_classif(df.drop('user-definedlabeln',axis=1),df['user-definedlabeln'])\n",
    "mi_score=pd.Series(mi_score,index=df.drop('user-definedlabeln',axis=1).columns)\n",
    "mi_score=(mi_score*100).sort_values(ascending=False)\n",
    "mi_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "4705468e-34be-43e0-980b-7459644dbf3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VideoID', 'Alpha2', 'Gamma1', 'Delta', 'Beta1', 'Theta', 'Alpha1',\n",
       "       'Gamma2', 'Raw', 'Mediation', 'Beta2', 'Attention', 'SubjectID',\n",
       "       'gender'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mi_score.head(14).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ab84246a-85a6-44e1-bfc8-de21ec9c948e",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_fea=['VideoID', 'Attention', 'Alpha2', 'Delta', 'Gamma1', 'Theta', 'Beta1',\n",
    "       'Alpha1', 'Mediation', 'Gamma2', 'SubjectID', 'Beta2', 'Raw', 'age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1564304e-d5fb-4903-bf0e-cebb9b9f54cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "df_sc=StandardScaler().fit_transform(df[top_fea])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f0c4a486-a90b-48c1-8ac6-cf6a3927241c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import callbacks,layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "725540f0-ce50-4bd8-a38a-48d9034d0118",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "Xtr,xte,Ytr,yte=train_test_split(df_sc,y,random_state=108,test_size=0.27)\n",
    "xtr,xval,ytr,yval=train_test_split(Xtr,Ytr,random_state=108,test_size=0.27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ead2db86-dcf7-4e72-a15d-c5decd8dee1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model-Building step, stacking the hidden layers\n",
    "model=keras.Sequential([\n",
    "    layers.Dense(64,input_shape=(14,),activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.27),\n",
    "    layers.Dense(124,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(248,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.32),   \n",
    "    layers.Dense(512,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.27),   \n",
    "    layers.Dense(664,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(512,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.32),\n",
    "    layers.Dense(264,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.27),\n",
    "    layers.Dense(124,activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(2,activation='sigmoid')\n",
    "])\n",
    "model.compile(optimizer='adamax', loss='binary_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4b8de43d-99a1-4546-874f-9809127b42d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 36ms/step - accuracy: 0.5245 - loss: 0.8966 - val_accuracy: 0.5384 - val_loss: 0.7657\n",
      "Epoch 2/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.5495 - loss: 0.7771 - val_accuracy: 0.6168 - val_loss: 0.6504\n",
      "Epoch 3/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.5744 - loss: 0.7392 - val_accuracy: 0.6176 - val_loss: 0.6482\n",
      "Epoch 4/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 30ms/step - accuracy: 0.5734 - loss: 0.7191 - val_accuracy: 0.6354 - val_loss: 0.6322\n",
      "Epoch 5/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.5948 - loss: 0.7018 - val_accuracy: 0.6516 - val_loss: 0.6172\n",
      "Epoch 6/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.6023 - loss: 0.6820 - val_accuracy: 0.6635 - val_loss: 0.6205\n",
      "Epoch 7/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.6084 - loss: 0.6696 - val_accuracy: 0.6734 - val_loss: 0.6002\n",
      "Epoch 8/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.6325 - loss: 0.6548 - val_accuracy: 0.6956 - val_loss: 0.5851\n",
      "Epoch 9/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.6369 - loss: 0.6521 - val_accuracy: 0.6888 - val_loss: 0.5844\n",
      "Epoch 10/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.6484 - loss: 0.6399 - val_accuracy: 0.7035 - val_loss: 0.5759\n",
      "Epoch 11/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.6388 - loss: 0.6424 - val_accuracy: 0.6956 - val_loss: 0.5723\n",
      "Epoch 12/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.6516 - loss: 0.6252 - val_accuracy: 0.6987 - val_loss: 0.5699\n",
      "Epoch 13/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.6597 - loss: 0.6206 - val_accuracy: 0.7102 - val_loss: 0.5741\n",
      "Epoch 14/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.6642 - loss: 0.6265 - val_accuracy: 0.7173 - val_loss: 0.5627\n",
      "Epoch 15/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.6661 - loss: 0.6177 - val_accuracy: 0.6975 - val_loss: 0.5610\n",
      "Epoch 16/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.6659 - loss: 0.6133 - val_accuracy: 0.7177 - val_loss: 0.5517\n",
      "Epoch 17/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 34ms/step - accuracy: 0.6808 - loss: 0.6045 - val_accuracy: 0.7213 - val_loss: 0.5498\n",
      "Epoch 18/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.6828 - loss: 0.6087 - val_accuracy: 0.7257 - val_loss: 0.5468\n",
      "Epoch 19/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.6735 - loss: 0.6131 - val_accuracy: 0.7249 - val_loss: 0.5486\n",
      "Epoch 20/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.6790 - loss: 0.6111 - val_accuracy: 0.7280 - val_loss: 0.5456\n",
      "Epoch 21/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.6831 - loss: 0.6015 - val_accuracy: 0.7340 - val_loss: 0.5290\n",
      "Epoch 22/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.6866 - loss: 0.5984 - val_accuracy: 0.7324 - val_loss: 0.5333\n",
      "Epoch 23/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.6974 - loss: 0.5854 - val_accuracy: 0.7391 - val_loss: 0.5239\n",
      "Epoch 24/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.6915 - loss: 0.5907 - val_accuracy: 0.7399 - val_loss: 0.5223\n",
      "Epoch 25/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.6784 - loss: 0.5923 - val_accuracy: 0.7387 - val_loss: 0.5140\n",
      "Epoch 26/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7045 - loss: 0.5783 - val_accuracy: 0.7411 - val_loss: 0.5269\n",
      "Epoch 27/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.6886 - loss: 0.5948 - val_accuracy: 0.7522 - val_loss: 0.4963\n",
      "Epoch 28/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.6933 - loss: 0.5743 - val_accuracy: 0.7395 - val_loss: 0.5101\n",
      "Epoch 29/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7004 - loss: 0.5752 - val_accuracy: 0.7462 - val_loss: 0.4946\n",
      "Epoch 30/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7104 - loss: 0.5644 - val_accuracy: 0.7585 - val_loss: 0.4863\n",
      "Epoch 31/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 34ms/step - accuracy: 0.7141 - loss: 0.5629 - val_accuracy: 0.7490 - val_loss: 0.4991\n",
      "Epoch 32/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.6953 - loss: 0.5673 - val_accuracy: 0.7601 - val_loss: 0.4741\n",
      "Epoch 33/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 33ms/step - accuracy: 0.7033 - loss: 0.5657 - val_accuracy: 0.7641 - val_loss: 0.4766\n",
      "Epoch 34/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 35ms/step - accuracy: 0.7056 - loss: 0.5640 - val_accuracy: 0.7712 - val_loss: 0.4653\n",
      "Epoch 35/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7238 - loss: 0.5414 - val_accuracy: 0.7708 - val_loss: 0.4563\n",
      "Epoch 36/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7164 - loss: 0.5588 - val_accuracy: 0.7791 - val_loss: 0.4500\n",
      "Epoch 37/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.7253 - loss: 0.5447 - val_accuracy: 0.7989 - val_loss: 0.4397\n",
      "Epoch 38/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 37ms/step - accuracy: 0.7198 - loss: 0.5457 - val_accuracy: 0.7902 - val_loss: 0.4371\n",
      "Epoch 39/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 34ms/step - accuracy: 0.7181 - loss: 0.5501 - val_accuracy: 0.8029 - val_loss: 0.4252\n",
      "Epoch 40/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7366 - loss: 0.5306 - val_accuracy: 0.7997 - val_loss: 0.4164\n",
      "Epoch 41/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7348 - loss: 0.5314 - val_accuracy: 0.8072 - val_loss: 0.4147\n",
      "Epoch 42/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7189 - loss: 0.5401 - val_accuracy: 0.8064 - val_loss: 0.4039\n",
      "Epoch 43/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7354 - loss: 0.5331 - val_accuracy: 0.8167 - val_loss: 0.3938\n",
      "Epoch 44/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 26ms/step - accuracy: 0.7328 - loss: 0.5147 - val_accuracy: 0.8052 - val_loss: 0.3999\n",
      "Epoch 45/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.7387 - loss: 0.5206 - val_accuracy: 0.8230 - val_loss: 0.3792\n",
      "Epoch 46/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 28ms/step - accuracy: 0.7479 - loss: 0.5165 - val_accuracy: 0.8147 - val_loss: 0.3821\n",
      "Epoch 47/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 27ms/step - accuracy: 0.7336 - loss: 0.5282 - val_accuracy: 0.8163 - val_loss: 0.3810\n",
      "Epoch 48/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 37ms/step - accuracy: 0.7419 - loss: 0.5224 - val_accuracy: 0.8246 - val_loss: 0.3753\n",
      "Epoch 49/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 37ms/step - accuracy: 0.7500 - loss: 0.5119 - val_accuracy: 0.8258 - val_loss: 0.3779\n",
      "Epoch 50/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7449 - loss: 0.4990 - val_accuracy: 0.8266 - val_loss: 0.3765\n",
      "Epoch 51/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7407 - loss: 0.5205 - val_accuracy: 0.8317 - val_loss: 0.3708\n",
      "Epoch 52/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7597 - loss: 0.4986 - val_accuracy: 0.8365 - val_loss: 0.3547\n",
      "Epoch 53/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7526 - loss: 0.4927 - val_accuracy: 0.8341 - val_loss: 0.3548\n",
      "Epoch 54/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7544 - loss: 0.4955 - val_accuracy: 0.8428 - val_loss: 0.3566\n",
      "Epoch 55/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7529 - loss: 0.4944 - val_accuracy: 0.8361 - val_loss: 0.3529\n",
      "Epoch 56/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7569 - loss: 0.4932 - val_accuracy: 0.8409 - val_loss: 0.3404\n",
      "Epoch 57/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7416 - loss: 0.5034 - val_accuracy: 0.8416 - val_loss: 0.3410\n",
      "Epoch 58/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7615 - loss: 0.4766 - val_accuracy: 0.8416 - val_loss: 0.3357\n",
      "Epoch 59/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 35ms/step - accuracy: 0.7560 - loss: 0.4880 - val_accuracy: 0.8531 - val_loss: 0.3313\n",
      "Epoch 60/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 33ms/step - accuracy: 0.7661 - loss: 0.4818 - val_accuracy: 0.8567 - val_loss: 0.3324\n",
      "Epoch 61/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7634 - loss: 0.4795 - val_accuracy: 0.8603 - val_loss: 0.3362\n",
      "Epoch 62/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7621 - loss: 0.4791 - val_accuracy: 0.8599 - val_loss: 0.3345\n",
      "Epoch 63/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7585 - loss: 0.4795 - val_accuracy: 0.8630 - val_loss: 0.3177\n",
      "Epoch 64/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7761 - loss: 0.4563 - val_accuracy: 0.8658 - val_loss: 0.3157\n",
      "Epoch 65/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7743 - loss: 0.4702 - val_accuracy: 0.8662 - val_loss: 0.3275\n",
      "Epoch 66/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 35ms/step - accuracy: 0.7741 - loss: 0.4621 - val_accuracy: 0.8658 - val_loss: 0.3156\n",
      "Epoch 67/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 33ms/step - accuracy: 0.7757 - loss: 0.4597 - val_accuracy: 0.8686 - val_loss: 0.3180\n",
      "Epoch 68/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.7833 - loss: 0.4585 - val_accuracy: 0.8737 - val_loss: 0.2989\n",
      "Epoch 69/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7659 - loss: 0.4707 - val_accuracy: 0.8765 - val_loss: 0.2902\n",
      "Epoch 70/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7607 - loss: 0.4738 - val_accuracy: 0.8769 - val_loss: 0.2954\n",
      "Epoch 71/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 32ms/step - accuracy: 0.7821 - loss: 0.4537 - val_accuracy: 0.8713 - val_loss: 0.3073\n",
      "Epoch 72/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7818 - loss: 0.4606 - val_accuracy: 0.8705 - val_loss: 0.2965\n",
      "Epoch 73/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7844 - loss: 0.4452 - val_accuracy: 0.8769 - val_loss: 0.2952\n",
      "Epoch 74/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7785 - loss: 0.4601 - val_accuracy: 0.8737 - val_loss: 0.2887\n",
      "Epoch 75/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7908 - loss: 0.4455 - val_accuracy: 0.8812 - val_loss: 0.2912\n",
      "Epoch 76/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7771 - loss: 0.4466 - val_accuracy: 0.8840 - val_loss: 0.2890\n",
      "Epoch 77/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7907 - loss: 0.4399 - val_accuracy: 0.8777 - val_loss: 0.2849\n",
      "Epoch 78/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.7866 - loss: 0.4419 - val_accuracy: 0.8749 - val_loss: 0.2824\n",
      "Epoch 79/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.7876 - loss: 0.4364 - val_accuracy: 0.8852 - val_loss: 0.2743\n",
      "Epoch 80/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 34ms/step - accuracy: 0.7918 - loss: 0.4295 - val_accuracy: 0.8852 - val_loss: 0.2677\n",
      "Epoch 81/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 32ms/step - accuracy: 0.7910 - loss: 0.4382 - val_accuracy: 0.8678 - val_loss: 0.2854\n",
      "Epoch 82/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7828 - loss: 0.4489 - val_accuracy: 0.8844 - val_loss: 0.2674\n",
      "Epoch 83/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.7921 - loss: 0.4305 - val_accuracy: 0.8793 - val_loss: 0.2640\n",
      "Epoch 84/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.7946 - loss: 0.4306 - val_accuracy: 0.8804 - val_loss: 0.2686\n",
      "Epoch 85/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 30ms/step - accuracy: 0.7975 - loss: 0.4247 - val_accuracy: 0.8705 - val_loss: 0.2730\n",
      "Epoch 86/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8017 - loss: 0.4246 - val_accuracy: 0.8943 - val_loss: 0.2551\n",
      "Epoch 87/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 31ms/step - accuracy: 0.7999 - loss: 0.4216 - val_accuracy: 0.8872 - val_loss: 0.2586\n",
      "Epoch 88/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8065 - loss: 0.4067 - val_accuracy: 0.8864 - val_loss: 0.2593\n",
      "Epoch 89/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.8004 - loss: 0.4180 - val_accuracy: 0.8971 - val_loss: 0.2443\n",
      "Epoch 90/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8099 - loss: 0.4077 - val_accuracy: 0.8868 - val_loss: 0.2553\n",
      "Epoch 91/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 28ms/step - accuracy: 0.7947 - loss: 0.4272 - val_accuracy: 0.8935 - val_loss: 0.2489\n",
      "Epoch 92/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8036 - loss: 0.4218 - val_accuracy: 0.8971 - val_loss: 0.2535\n",
      "Epoch 93/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8030 - loss: 0.4108 - val_accuracy: 0.8903 - val_loss: 0.2482\n",
      "Epoch 94/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8034 - loss: 0.4080 - val_accuracy: 0.8998 - val_loss: 0.2354\n",
      "Epoch 95/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8119 - loss: 0.4033 - val_accuracy: 0.9002 - val_loss: 0.2390\n",
      "Epoch 96/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.7996 - loss: 0.4201 - val_accuracy: 0.8967 - val_loss: 0.2423\n",
      "Epoch 97/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8084 - loss: 0.4126 - val_accuracy: 0.9022 - val_loss: 0.2344\n",
      "Epoch 98/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8148 - loss: 0.3996 - val_accuracy: 0.9034 - val_loss: 0.2396\n",
      "Epoch 99/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8222 - loss: 0.3883 - val_accuracy: 0.9010 - val_loss: 0.2328\n",
      "Epoch 100/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8279 - loss: 0.3847 - val_accuracy: 0.9062 - val_loss: 0.2257\n",
      "Epoch 101/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8137 - loss: 0.3965 - val_accuracy: 0.8987 - val_loss: 0.2280\n",
      "Epoch 102/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.8071 - loss: 0.3997 - val_accuracy: 0.9042 - val_loss: 0.2254\n",
      "Epoch 103/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.8257 - loss: 0.3801 - val_accuracy: 0.9046 - val_loss: 0.2254\n",
      "Epoch 104/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 37ms/step - accuracy: 0.8233 - loss: 0.3880 - val_accuracy: 0.9093 - val_loss: 0.2060\n",
      "Epoch 105/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 31ms/step - accuracy: 0.8273 - loss: 0.3711 - val_accuracy: 0.9093 - val_loss: 0.2167\n",
      "Epoch 106/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8280 - loss: 0.3782 - val_accuracy: 0.9066 - val_loss: 0.2064\n",
      "Epoch 107/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8240 - loss: 0.3773 - val_accuracy: 0.9089 - val_loss: 0.2076\n",
      "Epoch 108/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 35ms/step - accuracy: 0.8215 - loss: 0.3853 - val_accuracy: 0.9169 - val_loss: 0.2076\n",
      "Epoch 109/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 33ms/step - accuracy: 0.8257 - loss: 0.3852 - val_accuracy: 0.9105 - val_loss: 0.2108\n",
      "Epoch 110/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 35ms/step - accuracy: 0.8204 - loss: 0.3885 - val_accuracy: 0.9240 - val_loss: 0.1949\n",
      "Epoch 111/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 35ms/step - accuracy: 0.8200 - loss: 0.3879 - val_accuracy: 0.9200 - val_loss: 0.2111\n",
      "Epoch 112/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8311 - loss: 0.3776 - val_accuracy: 0.9161 - val_loss: 0.2012\n",
      "Epoch 113/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.8351 - loss: 0.3590 - val_accuracy: 0.9200 - val_loss: 0.2127\n",
      "Epoch 114/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8248 - loss: 0.3703 - val_accuracy: 0.9216 - val_loss: 0.1918\n",
      "Epoch 115/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8332 - loss: 0.3662 - val_accuracy: 0.9283 - val_loss: 0.2035\n",
      "Epoch 116/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 32ms/step - accuracy: 0.8278 - loss: 0.3840 - val_accuracy: 0.9181 - val_loss: 0.1964\n",
      "Epoch 117/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8269 - loss: 0.3828 - val_accuracy: 0.9287 - val_loss: 0.1878\n",
      "Epoch 118/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8317 - loss: 0.3694 - val_accuracy: 0.9252 - val_loss: 0.1939\n",
      "Epoch 119/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.8231 - loss: 0.3809 - val_accuracy: 0.9220 - val_loss: 0.1940\n",
      "Epoch 120/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8324 - loss: 0.3667 - val_accuracy: 0.9327 - val_loss: 0.1906\n",
      "Epoch 121/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8378 - loss: 0.3639 - val_accuracy: 0.9184 - val_loss: 0.1885\n",
      "Epoch 122/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 28ms/step - accuracy: 0.8357 - loss: 0.3560 - val_accuracy: 0.9264 - val_loss: 0.1842\n",
      "Epoch 123/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8383 - loss: 0.3540 - val_accuracy: 0.9276 - val_loss: 0.1889\n",
      "Epoch 124/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8213 - loss: 0.3616 - val_accuracy: 0.9291 - val_loss: 0.1753\n",
      "Epoch 125/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.8364 - loss: 0.3447 - val_accuracy: 0.9303 - val_loss: 0.1725\n",
      "Epoch 126/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8347 - loss: 0.3507 - val_accuracy: 0.9272 - val_loss: 0.1760\n",
      "Epoch 127/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 31ms/step - accuracy: 0.8454 - loss: 0.3448 - val_accuracy: 0.9264 - val_loss: 0.1767\n",
      "Epoch 128/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 29ms/step - accuracy: 0.8419 - loss: 0.3515 - val_accuracy: 0.9438 - val_loss: 0.1653\n",
      "Epoch 129/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 29ms/step - accuracy: 0.8289 - loss: 0.3708 - val_accuracy: 0.9454 - val_loss: 0.1763\n",
      "Epoch 130/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 32ms/step - accuracy: 0.8450 - loss: 0.3383 - val_accuracy: 0.9315 - val_loss: 0.1743\n",
      "Epoch 131/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 34ms/step - accuracy: 0.8403 - loss: 0.3501 - val_accuracy: 0.9343 - val_loss: 0.1749\n",
      "Epoch 132/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.8427 - loss: 0.3468 - val_accuracy: 0.9331 - val_loss: 0.1665\n",
      "Epoch 133/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8405 - loss: 0.3579 - val_accuracy: 0.9279 - val_loss: 0.1709\n",
      "Epoch 134/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8521 - loss: 0.3184 - val_accuracy: 0.9378 - val_loss: 0.1667\n",
      "Epoch 135/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.8389 - loss: 0.3462 - val_accuracy: 0.9371 - val_loss: 0.1586\n",
      "Epoch 136/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8390 - loss: 0.3506 - val_accuracy: 0.9359 - val_loss: 0.1593\n",
      "Epoch 137/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.8583 - loss: 0.3241 - val_accuracy: 0.9426 - val_loss: 0.1615\n",
      "Epoch 138/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.8559 - loss: 0.3281 - val_accuracy: 0.9422 - val_loss: 0.1551\n",
      "Epoch 139/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.8501 - loss: 0.3433 - val_accuracy: 0.9410 - val_loss: 0.1557\n",
      "Epoch 140/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.8520 - loss: 0.3275 - val_accuracy: 0.9359 - val_loss: 0.1548\n",
      "Epoch 141/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8556 - loss: 0.3248 - val_accuracy: 0.9418 - val_loss: 0.1515\n",
      "Epoch 142/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8454 - loss: 0.3347 - val_accuracy: 0.9327 - val_loss: 0.1626\n",
      "Epoch 143/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.8562 - loss: 0.3250 - val_accuracy: 0.9355 - val_loss: 0.1550\n",
      "Epoch 144/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 33ms/step - accuracy: 0.8567 - loss: 0.3226 - val_accuracy: 0.9363 - val_loss: 0.1512\n",
      "Epoch 145/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 34ms/step - accuracy: 0.8525 - loss: 0.3333 - val_accuracy: 0.9438 - val_loss: 0.1488\n",
      "Epoch 146/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step - accuracy: 0.8411 - loss: 0.3499 - val_accuracy: 0.9450 - val_loss: 0.1460\n",
      "Epoch 147/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 31ms/step - accuracy: 0.8456 - loss: 0.3265 - val_accuracy: 0.9434 - val_loss: 0.1544\n",
      "Epoch 148/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.8547 - loss: 0.3246 - val_accuracy: 0.9418 - val_loss: 0.1475\n",
      "Epoch 149/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 29ms/step - accuracy: 0.8548 - loss: 0.3225 - val_accuracy: 0.9458 - val_loss: 0.1573\n",
      "Epoch 150/150\n",
      "\u001b[1m244/244\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 29ms/step - accuracy: 0.8586 - loss: 0.3121 - val_accuracy: 0.9473 - val_loss: 0.1404\n"
     ]
    }
   ],
   "source": [
    "#Creating the callback feature to stop the training in-Between, in case of no improvement\n",
    "call=callbacks.EarlyStopping(patience=20,min_delta=0.0001,restore_best_weights=True)\n",
    "#Fitting the model\n",
    "history=model.fit(xtr,ytr,validation_data=(xval,yval),batch_size=28,epochs=150,callbacks=[call])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6cbde540-b333-4c90-9fdf-e1ac359fcab2",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'accuracy_score' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Calculate accuracy\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m accuracy \u001b[38;5;241m=\u001b[39m accuracy_score(yte, y_pred)\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAccuracy:\u001b[39m\u001b[38;5;124m\"\u001b[39m, accuracy)\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mClassification Report:\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'accuracy_score' is not defined"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "accuracy = accuracy_score(yte, pred_i)\n",
    "print(f\"Accuracy: {accuracy}\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(yte, pred_i))\n",
    "\n",
    "yte_1d = np.argmax(yte, axis=1)\n",
    "pred_i_1d = np.argmax(pred_i, axis=1)\n",
    "\n",
    "# Now, you can use these 1D arrays to compute the confusion matrix\n",
    "conf_matrix = confusion_matrix(yte_1d, pred_i_1d)\n",
    "\n",
    "print(\"conf_matrix\", conf_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85782ac2-8635-47fc-8d37-ab42914c0522",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
